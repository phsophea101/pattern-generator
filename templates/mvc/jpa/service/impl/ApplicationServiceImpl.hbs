package {{package}}.{{lowerCase service}}.biz.service.impl;

import com.wingmoney.core.exception.BusinessException;
import {{package}}.{{lowerCase service}}.biz.dao.{{titleCase service}}DAO;
import {{package}}.{{lowerCase service}}.biz.dto.{{titleCase service}}DTO;
import {{package}}.{{lowerCase service}}.biz.entity.{{titleCase service}}Entity;
import {{package}}.{{lowerCase service}}.biz.mapper.{{titleCase service}}Mapper;
import {{package}}.{{lowerCase service}}.biz.service.{{titleCase service}}Service;
import com.wingmoney.web.vo.request.PageableRequestVO;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.*;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import org.springframework.util.Assert;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import static {{package}}.{{lowerCase service}}.biz.dao.{{titleCase service}}DAO.idContains;
import static org.springframework.data.jpa.domain.Specification.where;

@Service
@RequiredArgsConstructor
public class {{titleCase service}}ServiceImpl implements {{titleCase service}}Service {
    private final {{titleCase service}}DAO {{lowerCase service}}DAO;
    @Override
    public void create({{titleCase service}}DTO {{lowerCase service}}DTO) throws BusinessException {
        {{titleCase service}}Entity entity = new {{titleCase service}}Entity();
        entity.setStatus(StatusTypes.ACTIVE);
        {{titleCase service}}Mapper.INSTANCE.copyDtoToEntity({{lowerCase service}}DTO, entity);
        this.{{lowerCase service}}DAO.save(entity);
        {{titleCase service}}Mapper.INSTANCE.copyEntityToDto(entity, {{lowerCase service}}DTO);
    }
    
    @Override
    public void update({{titleCase service}}DTO {{lowerCase service}}DTO, String id) throws BusinessException {
        {{titleCase service}}Entity entity = this.findOneEntity(id);
        {{titleCase service}}Mapper.INSTANCE.copyDtoToEntity({{lowerCase service}}DTO, entity);
        this.{{lowerCase service}}DAO.save(entity);
        {{titleCase service}}Mapper.INSTANCE.copyEntityToDto(entity, {{lowerCase service}}DTO);
    }
        
        
    @Override
    public void delete(String id) throws BusinessException {
        {{titleCase service}}DTO oldDto = this.findOne(id);
        {{titleCase service}}Entity entity = new {{titleCase service}}Entity();
        {{titleCase service}}Mapper.INSTANCE.copyDtoToEntity(oldDto, entity);
        entity.setStatus(StatusTypes.DELETED);
        this.{{lowerCase service}}DAO.save(entity);
    }
    
    @Override
    public {{titleCase service}}DTO findOne(String id) throws BusinessException {
        {{titleCase service}}Entity entity = this.findOneEntity(id);
        {{titleCase service}}DTO dto = new {{titleCase service}}DTO();
        {{titleCase service}}Mapper.INSTANCE.copyEntityToDto(entity, dto);
        return dto;
    }
    
    private {{titleCase service}}Entity findOneEntity(String id) throws BusinessException {
        Assert.notNull(id, "{{lowerCase service}} id require.");
        Optional<{{titleCase service}}Entity> entity = this.{{lowerCase service}}DAO.findById(id);
        if (entity.isEmpty()) {
            throw new BusinessException("E0404", "{{lowerCase service}} records not found.");
        }
        return entity.get();
    }

    @Override
    public Page<{{titleCase service}}DTO> findWithPage({{titleCase service}}DTO {{lowerCase service}}DTO, PageableRequestVO pageableRequestVO) throws BusinessException {
        {{titleCase service}}Entity entity = new {{titleCase service}}Entity();
        Specification<{{titleCase service}}Entity> spec = where(idContains({{lowerCase service}}DTO.getKeywords()));
        Pageable pageable = PageRequest.of( pageableRequestVO.getPage() - 1, pageableRequestVO.getRpp(), Sort.by("createdDate").descending() );
        Page<{{titleCase service}}Entity> {{lowerCase service}}Page = this.{{lowerCase service}}DAO.findAll(spec, pageable);
        List<{{titleCase service}}DTO> items = new ArrayList<>();
        if (!{{lowerCase service}}Page.isEmpty()) {
            {{titleCase service}}Mapper.INSTANCE.copyListEntityToDto({{lowerCase service}}Page.getContent(), items);
        }
        return new PageImpl<>(items, pageable, {{lowerCase service}}Page.getTotalElements());
    }
}